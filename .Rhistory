cat("\n")
salida <- read_warc_entry(aa,num )
num <- salida[["warc_header"]][["longitud"]]
cat("Num: " , num)
cat("\ncontent-length: " , salida[["warc_header"]][["content-length"]] )
cat("\nLongitud: " , salida[["warc_header"]][["longitud"]])
tipo <- salida[["warc_header"]][["warc-type"]]
cat("\nTipo" ,tipo)
cat("\n")
}
}
arcAll
aa <- arcAll[1]
aa
{
{    library(stringi)
library(pipeR)
library(purrr)
source("../scripts varios/warc-master/warc-master/R/aaa.r")
source("../scripts varios/warc-master/warc-master/R/as_warc.r")
source("../scripts varios/warc-master/warc-master/R/cdx.r")
source("../scripts varios/warc-master/warc-master/R/create_cdx.r")
source("../scripts varios/warc-master/warc-master/R/create_warc.r")
source("../scripts varios/warc-master/warc-master/R/process_entry.r")
source("../scripts varios/warc-master/warc-master/R/process_info.r")
source("../scripts varios/warc-master/warc-master/R/process_request.r")
source("../scripts varios/warc-master/warc-master/R/process_response.r")
source("../scripts varios/warc-master/warc-master/R/RcppExports.R")
source("../scripts varios/warc-master/warc-master/R/read_warc_entry.r")
source("../scripts varios/warc-master/warc-master/R/utils.r")
source("../scripts varios/warc-master/warc-master/R/validate.r")
source("../scripts varios/warc-master/warc-master/R/warc-package.R")
source("../scripts varios/warc-master/warc-master/R/write_warc_record.r")
bbb <- list()
num = 0
}
for ( i in 0:3){
cat("\n")
cat("-- ",i,"--",num,"\n")
cat("\n")
salida <- read_warc_entry(aa,num )
num <- salida[["warc_header"]][["longitud"]]
cat("Num: " , num)
cat("\ncontent-length: " , salida[["warc_header"]][["content-length"]] )
cat("\nLongitud: " , salida[["warc_header"]][["longitud"]])
tipo <- salida[["warc_header"]][["warc-type"]]
cat("\nTipo" ,tipo)
cat("\n")
}
}
arcAll
aa <- arcAll[1]
aa
{
{    library(stringi)
library(pipeR)
library(purrr)
source("../scripts varios/warc-master/warc-master/R/aaa.r")
source("../scripts varios/warc-master/warc-master/R/as_warc.r")
source("../scripts varios/warc-master/warc-master/R/cdx.r")
source("../scripts varios/warc-master/warc-master/R/create_cdx.r")
source("../scripts varios/warc-master/warc-master/R/create_warc.r")
source("../scripts varios/warc-master/warc-master/R/process_entry.r")
source("../scripts varios/warc-master/warc-master/R/process_info.r")
source("../scripts varios/warc-master/warc-master/R/process_request.r")
source("../scripts varios/warc-master/warc-master/R/process_response.r")
source("../scripts varios/warc-master/warc-master/R/RcppExports.R")
source("../scripts varios/warc-master/warc-master/R/read_warc_entry.r")
source("../scripts varios/warc-master/warc-master/R/utils.r")
source("../scripts varios/warc-master/warc-master/R/validate.r")
source("../scripts varios/warc-master/warc-master/R/warc-package.R")
source("../scripts varios/warc-master/warc-master/R/write_warc_record.r")
bbb <- list()
num = 0
}
for ( i in 0:3){
cat("\n")
cat("-- ",i,"--",num,"\n")
cat("\n")
salida <- read_warc_entry(aa,num )
num <- salida[["warc_header"]][["longitud"]]
cat("Num: " , num)
cat("\ncontent-length: " , salida[["warc_header"]][["content-length"]] )
cat("\nLongitud: " , salida[["warc_header"]][["longitud"]])
tipo <- salida[["warc_header"]][["warc-type"]]
cat("\nTipo" ,tipo)
cat("\n")
}
}
num = 0
for ( i in 0:3){
cat("\n")
cat("-- ",i,"--",num,"\n")
cat("\n")
salida <- read_warc_entry(aa,num )
num <- salida[["warc_header"]][["longitud"]]
cat("Num: " , num)
cat("\ncontent-length: " , salida[["warc_header"]][["content-length"]] )
cat("\nLongitud: " , salida[["warc_header"]][["longitud"]])
tipo <- salida[["warc_header"]][["warc-type"]]
cat("\nTipo" ,tipo)
cat("\n")
}
arcAll <- list.files(path = archivosTest,
pattern = "[^www]",
,recursive = TRUE
,full.names = TRUE
,all.files = TRUE)
archivosTest = "content-preprocessor/tests";
setwd("C:/Users/Miguel/Desktop/cosas de R/content-preprocessorInR")
source("scripts/pkgChecker.R")
rm(checkPackages)
rm(loadPackages)
rm(verifyandLoadPackages)
{
source("scripts/conexiones.R")
source("scripts/dataSource.R")
source("scripts/dataSms.R")
source("scripts/dataTwtid.R")
source("scripts/dataWarc.R")
source("scripts/dataEml.R")
source("scripts/dataTytb.R")
source("scripts/dataYtbid.R")
source("scripts/pipesFunction.R")
source("scripts/funcionesGenerales.R")
}
arcAll <- list.files(path = archivosTest,
pattern = "[^www]",
,recursive = TRUE
,full.names = TRUE
,all.files = TRUE)
arcAll
arcAll <- list.files(path = archivosTest,
pattern = "?!www",
,recursive = TRUE
,full.names = TRUE
,all.files = TRUE)
arcAll
arcAll <- list.files(path = archivosTest,
pattern = "*(?!www)",
,recursive = TRUE
,full.names = TRUE
,all.files = TRUE)
arcAll
arcAll <- list.files(path = archivosTest,
pattern = "*.!(warc)",
,recursive = TRUE
,full.names = TRUE
,all.files = TRUE)
arcAll
arcAll <- list.files(path = archivosTest,
pattern = "*.!(warc)",
,recursive = TRUE
,full.names = TRUE
,all.files = TRUE)
arcAll <- list.files(path = archivosTest,
pattern = "*.?!(warc)",
,recursive = TRUE
,full.names = TRUE
,all.files = TRUE)
arcAll
arcAll <- list.files(path = archivosTest,
pattern = "^(?!.*www|.*www|.*www)",
,recursive = TRUE
,full.names = TRUE
,all.files = TRUE)
arcAll
arcAll <- list.files(path = archivosTest,
pattern = "(?!.*warc|.*warc|.*warc)",
,recursive = TRUE
,full.names = TRUE
,all.files = TRUE)
arcAll <- list.files(path = archivosTest,
pattern = "(?:[^w]+|w(?:$|[^a]|a(?:$|[^r])|r(?:$|[^c])))*$
",
,recursive = TRUE
,full.names = TRUE
,all.files = TRUE)
arcAll
arcAll <- list.files(path = archivosTest,
pattern = "warc",
,recursive = TRUE
,full.names = TRUE
,all.files = TRUE)
arcAll
arcAll <- list.files(path = archivosTest,
pattern = "twtid|sms|eml",
,recursive = TRUE
,full.names = TRUE
,all.files = TRUE)
arcAll
arcAll <- list.files(path = archivosTest,
pattern = "twtid|tsms|eml|tytb|ytbid",
,recursive = TRUE
,full.names = TRUE
,all.files = TRUE)
arcAll
rm(list=ls())
{
archivosTest = "content-preprocessor/tests";
source("scripts/inicializacion.R")
#Construye el source y las propiedad de todos los objetos
invisible(sapply(listaInstancias[1],propiedadesTextoDate))
#Construye una lista de booleanos, donde TRUE es la posicion de la lista listaIntacias donde es vï¿½lida,
#FALSE, si no lo es
invalid <- lapply(listaInstancias,deleteInvalidInstances)
#Obtenemos la lista de instancais validas
listaInstanciasValidas <- obtainValidInstances()
#Se aplica la funcion de obtener propiedades Iniciales a las instancias validas
invisible(sapply(listaInstanciasValidas,propiedadesIniciales))
View(listaInstanciasValidas)
}
#Construye una lista de booleanos, donde TRUE es la posicion de la lista listaIntacias donde es vï¿½lida,
#FALSE, si no lo es
invalid <- lapply(listaInstancias,deleteInvalidInstances)
#Obtenemos la lista de instancais validas
listaInstanciasValidas <- obtainValidInstances()
obtainValidInstances = function(){
cont = 1;
for(elem in listaInstancias){
if(invalid[[cont]]){
listaInstanciasValidas <- list.append(listaInstanciasValidas,elem);
names(listaInstanciasValidas)[length(listaInstanciasValidas)] <- names(listaInstancias)[cont];
}
cont = cont + 1;
}
rm(cont)
return (listaInstanciasValidas);
}
#Obtenemos la lista de instancais validas
listaInstanciasValidas <- obtainValidInstances()
#Se aplica la funcion de obtener propiedades Iniciales a las instancias validas
invisible(sapply(listaInstanciasValidas,propiedadesIniciales))
View(listaInstanciasValidas)
rm(list=ls())
{
archivosTest = "content-preprocessor/tests";
source("scripts/inicializacion.R")
#Construye el source y las propiedad de todos los objetos
invisible(sapply(listaInstancias[1],propiedadesTextoDate))
#Construye una lista de booleanos, donde TRUE es la posicion de la lista listaIntacias donde es vï¿½lida,
#FALSE, si no lo es
invalid <- lapply(listaInstancias,deleteInvalidInstances)
#Obtenemos la lista de instancais validas
listaInstanciasValidas <- obtainValidInstances()
#Se aplica la funcion de obtener propiedades Iniciales a las instancias validas
invisible(sapply(listaInstanciasValidas,propiedadesIniciales))
View(listaInstanciasValidas)
}
View(listaInstanciasValidas)
#Construye el source y las propiedad de todos los objetos
invisible(sapply(listaInstancias,propiedadesTextoDate))
#Construye una lista de booleanos, donde TRUE es la posicion de la lista listaIntacias donde es vï¿½lida,
#FALSE, si no lo es
invalid <- lapply(listaInstancias,deleteInvalidInstances)
rm(list=ls())
{
archivosTest = "content-preprocessor/tests";
source("scripts/inicializacion.R")
#Construye el source y las propiedad de todos los objetos
invisible(sapply(listaInstancias,propiedadesTextoDate))
#Construye una lista de booleanos, donde TRUE es la posicion de la lista listaIntacias donde es vï¿½lida,
#FALSE, si no lo es
invalid <- lapply(listaInstancias,deleteInvalidInstances)
#Obtenemos la lista de instancais validas
listaInstanciasValidas <- obtainValidInstances()
#Se aplica la funcion de obtener propiedades Iniciales a las instancias validas
invisible(sapply(listaInstanciasValidas,propiedadesIniciales))
View(listaInstanciasValidas)
}
View(listaInstancias)
rm(list=ls())
{
archivosTest = "content-preprocessor/tests";
source("scripts/inicializacion.R")
#Construye el source y las propiedad de todos los objetos
invisible(sapply(listaInstancias,propiedadesTextoDate))
#Construye una lista de booleanos, donde TRUE es la posicion de la lista listaIntacias donde es vï¿½lida,
#FALSE, si no lo es
invalid <- lapply(listaInstancias,deleteInvalidInstances)
#Obtenemos la lista de instancais validas
listaInstanciasValidas <- obtainValidInstances()
#Se aplica la funcion de obtener propiedades Iniciales a las instancias validas
invisible(sapply(listaInstanciasValidas,propiedadesIniciales))
View(listaInstanciasValidas)
}
rm(list=ls())
{
archivosTest = "content-preprocessor/tests";
source("scripts/inicializacion.R")
#Construye el source y las propiedad de todos los objetos
invisible(sapply(listaInstancias,propiedadesTextoDate))
#Construye una lista de booleanos, donde TRUE es la posicion de la lista listaIntacias donde es vï¿½lida,
#FALSE, si no lo es
invalid <- lapply(listaInstancias,deleteInvalidInstances)
#Obtenemos la lista de instancais validas
listaInstanciasValidas <- obtainValidInstances()
#Se aplica la funcion de obtener propiedades Iniciales a las instancias validas
invisible(sapply(listaInstanciasValidas,propiedadesIniciales))
View(listaInstanciasValidas)
}
View(listaInstanciasValidas)
invisible(sapply(listaInstanciasValidas,pipes))
source("scripts/pkgChecker.R")
library("stringi", lib.loc="~/R/win-library/3.5")
invisible(sapply(listaInstanciasValidas,pipes))
library("stringr", lib.loc="~/R/win-library/3.5")
invisible(sapply(listaInstanciasValidas,pipes))
View(listaInstanciasValidas)
rm(list=ls())
{
archivosTest = "content-preprocessor/tests";
source("scripts/inicializacion.R")
#Construye el source y las propiedad de todos los objetos
invisible(sapply(listaInstancias,propiedadesTextoDate))
#Construye una lista de booleanos, donde TRUE es la posicion de la lista listaIntacias donde es vï¿½lida,
#FALSE, si no lo es
invalid <- lapply(listaInstancias,deleteInvalidInstances)
#Obtenemos la lista de instancais validas
listaInstanciasValidas <- obtainValidInstances()
#Se aplica la funcion de obtener propiedades Iniciales a las instancias validas
invisible(sapply(listaInstanciasValidas,propiedadesIniciales))
View(listaInstanciasValidas)
}
{
invisible(sapply(listaInstanciasValidas,pipes))
#Muestra las propiedades
for (x in listaInstanciasValidas) {
print(x$getPath())
}
#Hacer csv
fun$toCsv(listaInstanciasValidas)
}
pipes = function(x){
# x$getSpecificProperties('data') %>>% funcionesPipes$toLowerSource() %>>% ~data
x$getData() %>>%
funcionesPipes$deleteEspaciosMultiples() %>>%
funcionesPipes$toLowerSource() %>>%
funcionesPipes$deleteUrls() %>>%
funcionesPipes$deleteSignosPuntuacion() %>>%
funcionesPipes$deleteUsersFromTwitter() %>>%
# funcionesPipes$deleteDireccionesEmail() %>>%
{x$setData(.)}
# x$setSpecificProperties('data', data)
}
{
invisible(sapply(listaInstanciasValidas,pipes))
#Muestra las propiedades
for (x in listaInstanciasValidas) {
print(x$getPath())
}
#Hacer csv
fun$toCsv(listaInstanciasValidas)
}
{
invisible(sapply(listaInstanciasValidas,pipes))
#Muestra las propiedades
# for (x in listaInstanciasValidas) {
#     print(x$getPath())
# }
#Hacer csv
#fun$toCsv(listaInstanciasValidas)
}
rm(list=ls())
archivosTest = "content-preprocessor/tests";
source("scripts/inicializacion.R")
archivosTest = "content-preprocessor/tests";
source("scripts/inicializacion.R")
if (!require("pacman")) install.packages("pacman")
pacman::p_load_gh(
"trinker/lexicon",
"trinker/textclean"
)
rm(list=ls())
{
archivosTest = "content-preprocessor/tests";
source("scripts/inicializacion.R")
#Construye el source y las propiedad de todos los objetos
invisible(sapply(listaInstancias,propiedadesTextoDate))
#Construye una lista de booleanos, donde TRUE es la posicion de la lista listaIntacias donde es vï¿½lida,
#FALSE, si no lo es
invalid <- lapply(listaInstancias,deleteInvalidInstances)
#Obtenemos la lista de instancais validas
listaInstanciasValidas <- obtainValidInstances()
#Se aplica la funcion de obtener propiedades Iniciales a las instancias validas
invisible(sapply(listaInstanciasValidas,propiedadesIniciales))
View(listaInstanciasValidas)
}
pipes = function(x){
# x$getSpecificProperties('data') %>>% funcionesPipes$toLowerSource() %>>% ~data
x$getData() %>>%
funcionesPipes$deleteEspaciosMultiples() %>>%
funcionesPipes$toLowerSource() %>>%
funcionesPipes$deleteUrls() %>>%
funcionesPipes$deleteSignosPuntuacion() %>>%
funcionesPipes$deleteUsersFromTwitter() %>>%
# funcionesPipes$deleteDireccionesEmail() %>>%
funcionesPipes$deleteTagsHtml() %>>%
{x$setData(.)}
# x$setSpecificProperties('data', data)
}
invisible(sapply(listaInstanciasValidas,pipes))
pipes = function(x){
# x$getSpecificProperties('data') %>>% funcionesPipes$toLowerSource() %>>% ~data
x$getData() %>>%
funcionesPipes$deleteEspaciosMultiples() %>>%
funcionesPipes$toLowerSource() %>>%
funcionesPipes$deleteUrls() %>>%
funcionesPipes$deleteSignosPuntuacion() %>>%
funcionesPipes$deleteUsersFromTwitter() %>>%
# funcionesPipes$deleteDireccionesEmail() %>>%
funcionesPipes$deleteTagsHtml() %>>%
{x$setData(.)}
# x$setSpecificProperties('data', data)
}
invisible(sapply(listaInstanciasValidas,pipes))
replace_html("<p> sasad </p>")
source('C:/Users/Miguel/Desktop/cosas de R/content-preprocessorinr/scripts/inicializacion.R')
rm(list=ls())
{
archivosTest = "content-preprocessor/tests";
source("scripts/inicializacion.R")
#Construye el source y las propiedad de todos los objetos
invisible(sapply(listaInstancias,propiedadesTextoDate))
#Construye una lista de booleanos, donde TRUE es la posicion de la lista listaIntacias donde es vï¿½lida,
#FALSE, si no lo es
invalid <- lapply(listaInstancias,deleteInvalidInstances)
#Obtenemos la lista de instancais validas
listaInstanciasValidas <- obtainValidInstances()
#Se aplica la funcion de obtener propiedades Iniciales a las instancias validas
invisible(sapply(listaInstanciasValidas,propiedadesIniciales))
#View(listaInstanciasValidas)
}
{
invisible(sapply(listaInstanciasValidas,pipes))
#Muestra las propiedades
# for (x in listaInstanciasValidas) {
#     print(x$getPath())
# }
#Hacer csv
#fun$toCsv(listaInstanciasValidas)
}
rm(list=ls())
{
archivosTest = "content-preprocessor/tests";
source("scripts/inicializacion.R")
#Construye el source y las propiedad de todos los objetos
invisible(sapply(listaInstancias,propiedadesTextoDate))
#Construye una lista de booleanos, donde TRUE es la posicion de la lista listaIntacias donde es vï¿½lida,
#FALSE, si no lo es
invalid <- lapply(listaInstancias,deleteInvalidInstances)
#Obtenemos la lista de instancais validas
listaInstanciasValidas <- obtainValidInstances()
#Se aplica la funcion de obtener propiedades Iniciales a las instancias validas
invisible(sapply(listaInstanciasValidas,propiedadesIniciales))
#View(listaInstanciasValidas)
}
{
invisible(sapply(listaInstanciasValidas,pipes))
#Muestra las propiedades
# for (x in listaInstanciasValidas) {
#     print(x$getPath())
# }
#Hacer csv
#fun$toCsv(listaInstanciasValidas)
}
pipes = function(x){
# x$getSpecificProperties('data') %>>% funcionesPipes$toLowerSource() %>>% ~data
x$getData() %>>%
funcionesPipes$deleteEspaciosMultiples() %>>%
funcionesPipes$toLowerSource() %>>%
funcionesPipes$deleteUrls() %>>%
funcionesPipes$deleteSignosPuntuacion() %>>%
funcionesPipes$deleteUsersFromTwitter() %>>%
# funcionesPipes$deleteDireccionesEmail() %>>%
funcionesPipes$deleteTagsHtml() %>>%
{x$setData(.)}
# x$setSpecificProperties('data', data)
}
{
invisible(sapply(listaInstanciasValidas,pipes))
#Muestra las propiedades
# for (x in listaInstanciasValidas) {
#     print(x$getPath())
# }
#Hacer csv
#fun$toCsv(listaInstanciasValidas)
}
{
invisible(sapply(listaInstanciasValidas,pipes))
#Muestra las propiedades
# for (x in listaInstanciasValidas) {
#     print(x$getPath())
# }
#Hacer csv
#fun$toCsv(listaInstanciasValidas)
}
rm(list=ls())
{
archivosTest = "content-preprocessor/tests";
source("scripts/inicializacion.R")
#Construye el source y las propiedad de todos los objetos
invisible(sapply(listaInstancias,propiedadesTextoDate))
#Construye una lista de booleanos, donde TRUE es la posicion de la lista listaIntacias donde es vï¿½lida,
#FALSE, si no lo es
invalid <- lapply(listaInstancias,deleteInvalidInstances)
#Obtenemos la lista de instancais validas
listaInstanciasValidas <- obtainValidInstances()
#Se aplica la funcion de obtener propiedades Iniciales a las instancias validas
invisible(sapply(listaInstanciasValidas,propiedadesIniciales))
#View(listaInstanciasValidas)
}
